{
  "workflow_name": "网络攻击检测智能体-循环体版本",
  "workflow_version": "2.0.0",
  "description": "基于循环体模块的网络攻击检测系统，支持报文列表批量处理和上下文状态保持",
  
  "workflow_structure": {
    "input_schema": {
      "type": "object",
      "properties": {
        "packet_list": {
          "type": "array",
          "description": "待处理的报文列表",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {"type": "string"},
              "source_ip": {"type": "string"},
              "method": {"type": "string"},
              "url": {"type": "string"},
              "headers": {"type": "object"},
              "body": {"type": "string"}
            }
          }
        }
      }
    },
    
    "main_workflow": {
      "nodes": [
        {
          "id": "input_processor",
          "name": "输入预处理器",
          "type": "python_execution",
          "description": "处理输入的报文列表，准备循环变量",
          "function": "main",
          "code": "def main(packet_list_json):\n    import json\n    try:\n        data = json.loads(packet_list_json)\n        packet_list = data.get('packet_list', [])\n        \n        # 初始化上下文数据\n        initial_context = {\n            'ip_stats': {},\n            'global_stats': {\n                'total_packets': 0,\n                'attack_packets': 0,\n                'start_time': __import__('datetime').datetime.now().timestamp()\n            },\n            'recent_attacks': [],\n            'final_results': []\n        }\n        \n        return {\n            'output': json.dumps({\n                'packet_list': packet_list,\n                'context_data': initial_context,\n                'total_packets': len(packet_list)\n            })\n        }\n    except Exception as e:\n        return {\n            'output': json.dumps({\n                'error': True,\n                'message': str(e)\n            })\n        }",
          "input": "{{workflow.input}}",
          "position": {"x": 100, "y": 100}
        },
        
        {
          "id": "packet_processing_loop",
          "name": "报文处理循环体",
          "type": "loop_module",
          "description": "循环处理每个报文，维护上下文状态",
          "loop_config": {
            "max_iterations": 1000,
            "loop_variable": "context_data",
            "iteration_variable": "current_packet",
            "iteration_source": "{{input_processor.output.packet_list}}",
            "termination_condition": "iteration_complete",
            "initial_loop_variable": "{{input_processor.output.context_data}}"
          },
          
          "sub_workflow": {
            "nodes": [
              {
                "id": "loop_start",
                "name": "循环开始模块",
                "type": "loop_start",
                "description": "循环子图开始节点",
                "inputs": {
                  "current_packet": "{{loop.current_iteration}}",
                  "context_data": "{{loop.loop_variable}}"
                }
              },
              
              {
                "id": "packet_processor",
                "name": "报文处理器",
                "type": "python_execution",
                "description": "处理单个报文并更新上下文",
                "function": "main",
                "code_file": "loop_modules/packet_processor.py",
                "inputs": {
                  "current_packet": "{{loop_start.current_packet}}",
                  "context_data": "{{loop_start.context_data}}"
                }
              },
              
              {
                "id": "risk_decision",
                "name": "风险决策节点",
                "type": "switch_case",
                "description": "根据风险等级决定是否需要LLM分析",
                "input": "{{packet_processor.output}}",
                "condition_field": "processed_packet.requires_llm_analysis",
                "cases": [
                  {
                    "condition": true,
                    "next_node": "llm_analyzer"
                  },
                  {
                    "condition": false,
                    "next_node": "direct_response"
                  }
                ],
                "default_case": "direct_response"
              },
              
              {
                "id": "llm_analyzer",
                "name": "LLM深度分析器",
                "type": "python_execution",
                "description": "为高风险报文准备LLM分析",
                "function": "main",
                "code_file": "loop_modules/llm_analyzer.py",
                "inputs": {
                  "packet_result": "{{packet_processor.output}}",
                  "context_data": "{{packet_processor.output}}"
                }
              },
              
              {
                "id": "llm_analysis",
                "name": "LLM分析模块",
                "type": "llm_module",
                "description": "使用大语言模型进行深度威胁分析",
                "llm_config": {
                  "model": "gpt-4",
                  "temperature": 0.1,
                  "max_tokens": 2000,
                  "system_prompt": "你是一位资深的网络安全专家，专门负责深度分析网络攻击和威胁。请基于提供的数据进行专业、准确的安全分析。"
                },
                "input": "{{llm_analyzer.output.prompt}}",
                "condition": "{{risk_decision.output}} == 'llm_analyzer'"
              },
              
              {
                "id": "response_generator",
                "name": "响应生成器",
                "type": "python_execution",
                "description": "生成最终的安全响应报告",
                "function": "main",
                "code_file": "loop_modules/response_generator.py",
                "inputs": {
                  "packet_result": "{{packet_processor.output}}",
                  "llm_analysis_result": "{{llm_analysis.output || 'null'}}"
                }
              },
              
              {
                "id": "direct_response",
                "name": "直接响应生成器",
                "type": "python_execution",
                "description": "为低风险报文生成简化响应",
                "function": "main",
                "code": "def main(packet_result, empty_llm=''):\n    import json\n    from datetime import datetime\n    \n    try:\n        packet_data = json.loads(packet_result)\n        processed_packet = packet_data.get('processed_packet', {})\n        \n        # 生成简化响应\n        simple_response = {\n            'response_id': f\"RESP_{int(datetime.now().timestamp())}\",\n            'timestamp': datetime.now().isoformat(),\n            'packet_id': processed_packet.get('packet_id', ''),\n            'threat_assessment': {\n                'final_threat_level': 'low',\n                'is_attack': processed_packet.get('is_attack', False),\n                'confidence_score': 0.3\n            },\n            'response_action': {\n                'action': 'log_and_continue',\n                'description': '记录日志并继续监控',\n                'priority': 'low'\n            },\n            'executive_summary': f\"来自 {processed_packet.get('source_ip', 'unknown')} 的请求风险较低，正常处理。\"\n        }\n        \n        return {\n            'output': json.dumps(simple_response)\n        }\n    except Exception as e:\n        return {\n            'output': json.dumps({\n                'error': True,\n                'message': str(e)\n            })\n        }",
                "inputs": {
                  "packet_result": "{{packet_processor.output}}",
                  "empty_llm": "''"
                },
                "condition": "{{risk_decision.output}} == 'direct_response'"
              },
              
              {
                "id": "context_updater",
                "name": "上下文更新器",
                "type": "python_execution",
                "description": "更新循环变量中的上下文数据",
                "function": "main",
                "code": "def main(packet_result, response_result):\n    import json\n    \n    try:\n        packet_data = json.loads(packet_result)\n        response_data = json.loads(response_result)\n        \n        # 提取更新后的上下文\n        updated_context = packet_data.get('updated_context', {})\n        \n        # 添加当前处理结果到最终结果列表\n        if 'final_results' not in updated_context:\n            updated_context['final_results'] = []\n        \n        updated_context['final_results'].append(response_data)\n        \n        return {\n            'output': json.dumps(updated_context)\n        }\n    except Exception as e:\n        return {\n            'output': json.dumps({\n                'error': True,\n                'message': str(e)\n            })\n        }",
                "inputs": {
                  "packet_result": "{{packet_processor.output}}",
                  "response_result": "{{response_generator.output || direct_response.output}}"
                }
              },
              
              {
                "id": "loop_variable_update",
                "name": "循环变量更新模块",
                "type": "loop_variable_update",
                "description": "更新循环变量为新的上下文数据",
                "update_variable": "context_data",
                "update_source": "{{context_updater.output}}"
              }
            ],
            
            "edges": [
              {"from": "loop_start", "to": "packet_processor"},
              {"from": "packet_processor", "to": "risk_decision"},
              {"from": "risk_decision", "to": "llm_analyzer", "condition": "requires_llm_analysis == true"},
              {"from": "risk_decision", "to": "direct_response", "condition": "requires_llm_analysis == false"},
              {"from": "llm_analyzer", "to": "llm_analysis"},
              {"from": "llm_analysis", "to": "response_generator"},
              {"from": "response_generator", "to": "context_updater"},
              {"from": "direct_response", "to": "context_updater"},
              {"from": "context_updater", "to": "loop_variable_update"}
            ]
          },
          
          "position": {"x": 300, "y": 100}
        },
        
        {
          "id": "final_report_generator",
          "name": "最终报告生成器",
          "type": "python_execution",
          "description": "生成整个报文列表的处理总结报告",
          "function": "main",
          "code": "def main(final_context_data):\n    import json\n    from datetime import datetime\n    \n    try:\n        context = json.loads(final_context_data)\n        final_results = context.get('final_results', [])\n        global_stats = context.get('global_stats', {})\n        \n        # 统计分析\n        total_packets = global_stats.get('total_packets', 0)\n        attack_packets = global_stats.get('attack_packets', 0)\n        attack_rate = (attack_packets / max(total_packets, 1)) * 100\n        \n        # 按威胁等级分类\n        threat_distribution = {\n            'critical': 0,\n            'high': 0,\n            'medium': 0,\n            'low': 0\n        }\n        \n        attack_types_summary = {}\n        affected_ips = set()\n        \n        for result in final_results:\n            threat_level = result.get('threat_assessment', {}).get('final_threat_level', 'low')\n            threat_distribution[threat_level] = threat_distribution.get(threat_level, 0) + 1\n            \n            if result.get('threat_assessment', {}).get('is_attack'):\n                ip = result.get('technical_details', {}).get('source_ip', 'unknown')\n                affected_ips.add(ip)\n                \n                attack_types = result.get('threat_assessment', {}).get('attack_types', [])\n                for attack_type in attack_types:\n                    attack_types_summary[attack_type] = attack_types_summary.get(attack_type, 0) + 1\n        \n        # 生成最终报告\n        summary_report = {\n            'report_id': f\"RPT_{int(datetime.now().timestamp())}\",\n            'generation_time': datetime.now().isoformat(),\n            'analysis_summary': {\n                'total_packets_processed': total_packets,\n                'attack_packets_detected': attack_packets,\n                'attack_rate_percentage': round(attack_rate, 2),\n                'affected_ip_count': len(affected_ips),\n                'threat_distribution': threat_distribution,\n                'attack_types_summary': attack_types_summary\n            },\n            'detailed_results': final_results,\n            'recommendations': {\n                'high_priority': [],\n                'medium_priority': [],\n                'monitoring_focus': list(affected_ips)\n            }\n        }\n        \n        # 基于分析结果生成建议\n        if threat_distribution.get('critical', 0) > 0:\n            summary_report['recommendations']['high_priority'].append('立即处理严重威胁事件')\n            summary_report['recommendations']['high_priority'].append('启动应急响应程序')\n        \n        if attack_rate > 10:\n            summary_report['recommendations']['high_priority'].append('加强整体安全防护')\n        \n        if len(affected_ips) > 5:\n            summary_report['recommendations']['medium_priority'].append('分析攻击IP的关联性')\n        \n        return {\n            'output': json.dumps(summary_report)\n        }\n    except Exception as e:\n        return {\n            'output': json.dumps({\n                'error': True,\n                'message': str(e)\n            })\n        }",
          "input": "{{packet_processing_loop.loop_variable}}",
          "position": {"x": 500, "y": 100}
        }
      ],
      
      "edges": [
        {"from": "input_processor", "to": "packet_processing_loop"},
        {"from": "packet_processing_loop", "to": "final_report_generator"}
      ]
    },
    
    "output_schema": {
      "type": "object",
      "properties": {
        "report_id": {"type": "string"},
        "generation_time": {"type": "string"},
        "analysis_summary": {
          "type": "object",
          "properties": {
            "total_packets_processed": {"type": "number"},
            "attack_packets_detected": {"type": "number"},
            "attack_rate_percentage": {"type": "number"},
            "threat_distribution": {"type": "object"}
          }
        },
        "detailed_results": {"type": "array"},
        "recommendations": {"type": "object"}
      }
    }
  },
  
  "execution_settings": {
    "timeout_seconds": 300,
    "retry_count": 2,
    "error_handling": "continue_on_error",
    "logging_level": "INFO",
    "loop_settings": {
      "max_loop_time": 600,
      "batch_processing": true,
      "context_persistence": true
    }
  },
  
  "monitoring": {
    "metrics": [
      "total_processing_time",
      "packets_per_second",
      "attack_detection_rate",
      "llm_analysis_rate",
      "loop_iterations_count"
    ],
    "alerts": [
      {
        "condition": "attack_rate > 20%",
        "action": "high_priority_alert"
      },
      {
        "condition": "processing_time > 300s",
        "action": "performance_alert"
      },
      {
        "condition": "critical_threats > 0",
        "action": "security_alert"
      }
    ]
  }
}